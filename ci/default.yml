variables:
  - name: solution
    value: SourcemapTools.sln
  - name: build_configuration
    value: Release
  - name: assemblyVersion
    value: 3.0.0
  - name: packageVersion
    value: 3.0.0
  - name: nugetDevVersion
    value: 3.0.1

trigger:
  - master
  - release
pr:
  branches:
    include:
    - '*'

stages:

- stage: ''
  displayName: ''
  jobs:
  - job: main_job
    pool:
      vmImage: 'windows-2022'
    displayName: 'SourceMap Tools'

    steps:

#########
# BUILD #
#########
    - task: UseDotNet@2
      displayName: 'Install .NET 8'
      inputs:
        includePreviewVersions: true
        version: 8.x

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/ci/SetVersion.ps1'
        workingDirectory: '$(Build.SourcesDirectory)'
        arguments: -path $(Build.SourcesDirectory)/Directory.Build.props -version $(assemblyVersion)
      displayName: Update assembly version

    - task: MSBuild@1
      inputs:
        solution: '$(solution)'
        configuration: '$(build_configuration)'
        msbuildArguments: '/t:Restore;Rebuild -m /p:ContinuousIntegrationBuild=true'
      displayName: Build solution

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: '$(Build.SourcesDirectory)/tests/SourcemapTools.UnitTests/SourcemapTools.UnitTests.csproj'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: -f net6.0 -c $(build_configuration)
        nobuild: true
      displayName: Publish test project for .NET 6

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: '$(Build.SourcesDirectory)/tests/SourcemapTools.UnitTests/SourcemapTools.UnitTests.csproj'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: -f net7.0 -c $(build_configuration)
        nobuild: true
      displayName: Publish test project for .NET 7

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: '$(Build.SourcesDirectory)/tests/SourcemapTools.UnitTests/SourcemapTools.UnitTests.csproj'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: -f net8.0 -c $(build_configuration)
        nobuild: true
      displayName: Publish test project for .NET 8
########
# TEST #
########
    - script: dotnet test $(Build.SourcesDirectory)\tests\SourcemapTools.UnitTests\bin\Release\net48\SourcemapTools.UnitTests.dll /Framework:net48 /logger:trx
      displayName: 'Tests: .NET FX 4.8'

    - task: PublishTestResults@2
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: 'NETFX 4.8'
      displayName: 'Publish test results'
      condition: succeededOrFailed()

    - task: DeleteFiles@1
      inputs:
        contents: '**/*.trx'
      displayName: 'Cleanup'
      condition: succeededOrFailed()

    - script: dotnet test $(Build.SourcesDirectory)\tests\SourcemapTools.UnitTests\bin\Release\net6.0\SourcemapTools.UnitTests.dll /Framework:net6.0 /logger:trx
      displayName: 'Tests: .NET 6'
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: '.NET 6'
      displayName: 'Publish test results'
      condition: succeededOrFailed()

    - task: DeleteFiles@1
      inputs:
        contents: '**/*.trx'
      displayName: 'Cleanup'
      condition: succeededOrFailed()

    - script: dotnet test $(Build.SourcesDirectory)\tests\SourcemapTools.UnitTests\bin\Release\net7.0\SourcemapTools.UnitTests.dll /Framework:net7.0 /logger:trx
      displayName: 'Tests: .NET 7'
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: '.NET 7'
      displayName: 'Publish test results'
      condition: succeededOrFailed()

    - task: DeleteFiles@1
      inputs:
        contents: '**/*.trx'
      displayName: 'Cleanup'
      condition: succeededOrFailed()

    - script: dotnet test $(Build.SourcesDirectory)\tests\SourcemapTools.UnitTests\bin\Release\net8.0\SourcemapTools.UnitTests.dll /Framework:net8.0 /logger:trx
      displayName: 'Tests: .NET 8'
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: '.NET 8'
      displayName: 'Publish test results'
      condition: succeededOrFailed()

    - task: DeleteFiles@1
      inputs:
        contents: '**/*.trx'
      displayName: 'Cleanup'
      condition: succeededOrFailed()
#################
# PUBLISH NUGET #
#################
    - powershell: echo "##vso[task.setvariable variable=packageVersion]$(nugetDevVersion)-rc.$(Build.BuildId)"
      condition: eq(variables['Build.SourceBranchName'], 'master')
      displayName: Update nuget version

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/ci/BuildNuspecs.ps1'
        workingDirectory: '$(Build.SourcesDirectory)'
        arguments: -path $(Build.SourcesDirectory)/ci/SourceMapTools.nuspec -version $(packageVersion) -branch $(Build.SourceBranchName)
      displayName: Update nuspecs
      condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'release'))

    - task: CmdLine@2
      inputs:
        script: nuget.exe Pack $(Build.SourcesDirectory)\ci\SourceMapTools.nuspec -OutputDirectory $(Build.SourcesDirectory)\ci
        workingDirectory: $(Build.SourcesDirectory)/ci
      displayName: Build nuget for Azure Artifacts
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

    - task: CmdLine@2
      inputs:
        script: nuget.exe Pack $(Build.SourcesDirectory)\ci\SourceMapTools.nuspec -OutputDirectory $(Build.SourcesDirectory)\ci -Symbols -SymbolPackageFormat snupkg
        workingDirectory: $(Build.SourcesDirectory)/ci
      displayName: Build nuget for Nuget.org
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'release'))

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/ci/SourceMapTools.*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'sourcemaptools/sourcemap-tools'
      displayName: Publish to Azure Artifacts feed
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/ci/SourceMapTools.*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'sourcemap-tools at nuget.org'
      displayName: Publish to Nuget.org
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'release'))

