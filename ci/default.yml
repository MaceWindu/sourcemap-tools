variables:
  - name: solution
    value: SourcemapTools.sln
  - name: build_configuration
    value: Release
  - name: assemblyVersion
    value: 3.0.0
  - name: packageVersion
    value: 3.0.0
  - name: nugetDevVersion
    value: 3.0.1

trigger:
  - master
  - release
pr:
  branches:
    include:
    - '*'

stages:

- stage: ''
  displayName: ''
  jobs:
  - job: main_job
    pool:
      vmImage: 'windows-2022'
    displayName: 'SourceMap Tools'

    steps:

#########
# BUILD #
#########
    - task: UseDotNet@2
      displayName: 'Install .NET 8'
      inputs:
        includePreviewVersions: true
        version: 8.x

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/ci/SetVersion.ps1'
        workingDirectory: '$(Build.SourcesDirectory)'
        arguments: -path $(Build.SourcesDirectory)/Directory.Build.props -version $(assemblyVersion)
      displayName: Update assembly version

    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '-property:ContinuousIntegrationBuild=true --configuration $(build_configuration)'
      displayName: Build Solution

########
# TEST #
########
    - task: UseDotNet@2
      displayName: 'Install .NET 6 SDK'
      inputs:
        packageType: sdk
        version: 6.x

    - task: UseDotNet@2
      displayName: 'Install .NET 7 SDK'
      inputs:
        packageType: sdk
        version: 7.x

    - script: dotnet test $(Build.SourcesDirectory)\$(solution) -c $(build_configuration) -l trx
      displayName: 'Run Tests'
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: 'Tests'
      displayName: 'Publish test results'
      condition: succeededOrFailed()

#################
# PUBLISH NUGET #
#################
    - powershell: echo "##vso[task.setvariable variable=packageVersion]$(nugetDevVersion)-rc.$(Build.BuildId)"
      condition: eq(variables['Build.SourceBranchName'], 'master')
      displayName: Update nuget version

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/ci/BuildNuspecs.ps1'
        workingDirectory: '$(Build.SourcesDirectory)'
        arguments: -path $(Build.SourcesDirectory)/ci/SourceMapTools.nuspec -version $(packageVersion) -branch $(Build.SourceBranchName)
      displayName: Update nuspecs
      condition: or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'release'))

    - task: CmdLine@2
      inputs:
        script: nuget.exe Pack $(Build.SourcesDirectory)\ci\SourceMapTools.nuspec -OutputDirectory $(Build.SourcesDirectory)\ci
        workingDirectory: $(Build.SourcesDirectory)/ci
      displayName: Build nuget for Azure Artifacts
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

    - task: CmdLine@2
      inputs:
        script: nuget.exe Pack $(Build.SourcesDirectory)\ci\SourceMapTools.nuspec -OutputDirectory $(Build.SourcesDirectory)\ci -Symbols -SymbolPackageFormat snupkg
        workingDirectory: $(Build.SourcesDirectory)/ci
      displayName: Build nuget for Nuget.org
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'release'))

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/ci/SourceMapTools.*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: 'd119c8d5-d981-4087-b983-65c3339155a0/8c90a52a-2539-4e08-84e4-05beb440b781'
      displayName: Publish to Azure Artifacts feed
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/ci/SourceMapTools.*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'nuget.org'
      displayName: Publish to Nuget.org
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'release'))

